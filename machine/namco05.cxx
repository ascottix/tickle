/*
    Namco 05xx (starfield generator) custom chip emulator

    Copyright (c) 2011 Alessandro Scotti
    http://www.ascotti.org/

    Use of this source code is governed by a MIT-style license that can be found in the LICENSE file.
*/
#include "namco05.h"

// Information about how this chip works and the data on the star placement
// are from the MAME driver video/galaga.c

struct Star {
    int x, y, color;
};

const Star StarFieldA[2*63] =
{
    { 0x85, 0x06, 0x35 },
    { 0x8F, 0x08, 0x30 },
    { 0xE5, 0x1B, 0x07 },
    { 0x22, 0x1C, 0x31 },
    { 0xE5, 0x25, 0x1D },
    { 0x15, 0x26, 0x29 },
    { 0x80, 0x2D, 0x3B },
    { 0x97, 0x2E, 0x1C },
    { 0xBA, 0x3B, 0x05 },
    { 0x36, 0x3D, 0x36 },
    { 0x57, 0x44, 0x09 },
    { 0xCF, 0x44, 0x3D },
    { 0x61, 0x4E, 0x27 },
    { 0x87, 0x64, 0x1A },
    { 0xD6, 0x64, 0x17 },
    { 0x0B, 0x6C, 0x3C },
    { 0x06, 0x6D, 0x24 },
    { 0x18, 0x6E, 0x3A },
    { 0xA9, 0x79, 0x23 },
    { 0x8A, 0x7B, 0x11 },
    { 0xD6, 0x80, 0x0C },
    { 0x67, 0x82, 0x3F },
    { 0x39, 0x83, 0x38 },
    { 0x72, 0x83, 0x14 },
    { 0xEC, 0x84, 0x16 },
    { 0x8E, 0x85, 0x10 },
    { 0x20, 0x88, 0x25 },
    { 0x95, 0x8A, 0x0F },
    { 0x0E, 0x8D, 0x00 },
    { 0x06, 0x91, 0x2E },
    { 0x07, 0x94, 0x0D },
    { 0xAE, 0x97, 0x0B },
    { 0x00, 0x98, 0x2D },
    { 0x86, 0x9B, 0x01 },
    { 0x58, 0xA1, 0x34 },
    { 0xFE, 0xA1, 0x3E },
    { 0xA2, 0xA8, 0x1F },
    { 0x41, 0xAA, 0x0A },
    { 0x3F, 0xAC, 0x32 },
    { 0xDE, 0xAC, 0x03 },
    { 0xD4, 0xB9, 0x26 },
    { 0x6D, 0xBB, 0x1B },
    { 0x62, 0xBD, 0x39 },
    { 0xC9, 0xBE, 0x18 },
    { 0x6C, 0xC1, 0x04 },
    { 0x59, 0xC3, 0x21 },
    { 0x60, 0xCC, 0x0E },
    { 0x91, 0xCC, 0x12 },
    { 0x3F, 0xCF, 0x06 },
    { 0xF7, 0xCF, 0x22 },
    { 0x44, 0xD0, 0x33 },
    { 0x34, 0xD2, 0x08 },
    { 0xD3, 0xD9, 0x20 },
    { 0x71, 0xDD, 0x37 },
    { 0x73, 0xE1, 0x2C },
    { 0xB9, 0xE3, 0x2F },
    { 0xA9, 0xE4, 0x13 },
    { 0xD3, 0xE7, 0x19 },
    { 0x37, 0xED, 0x02 },
    { 0xBD, 0xF4, 0x15 },
    { 0x0F, 0xF6, 0x28 },
    { 0x4F, 0xF7, 0x2B },
    { 0xFB, 0xFF, 0x2A },
    
    { 0xFE, 0x04, 0x3D },
    { 0xC4, 0x06, 0x10 },
    { 0x1E, 0x07, 0x2D },
    { 0x83, 0x0B, 0x1F },
    { 0x2E, 0x0D, 0x3C },
    { 0x1F, 0x0E, 0x00 },
    { 0xD8, 0x0E, 0x2C },
    { 0x03, 0x0F, 0x17 },
    { 0x95, 0x11, 0x3F },
    { 0x6A, 0x17, 0x35 },
    { 0xCC, 0x17, 0x02 },
    { 0x00, 0x18, 0x32 },
    { 0x92, 0x1D, 0x36 },
    { 0xE3, 0x21, 0x04 },
    { 0x2F, 0x2D, 0x37 },
    { 0xF0, 0x2F, 0x0C },
    { 0x9B, 0x3E, 0x06 },
    { 0xA4, 0x4C, 0x07 },
    { 0xEA, 0x4D, 0x13 },
    { 0x84, 0x4E, 0x21 },
    { 0x33, 0x52, 0x0F },
    { 0x70, 0x53, 0x0E },
    { 0x06, 0x59, 0x08 },
    { 0x81, 0x60, 0x28 },
    { 0x37, 0x61, 0x29 },
    { 0x8F, 0x67, 0x2F },
    { 0x1B, 0x6A, 0x1D },
    { 0xBF, 0x7C, 0x12 },
    { 0x51, 0x7F, 0x31 },
    { 0x61, 0x86, 0x25 },
    { 0x6A, 0x8F, 0x0D },
    { 0x6A, 0x91, 0x19 },
    { 0x90, 0x92, 0x05 },
    { 0x3B, 0x96, 0x24 },
    { 0x8C, 0x97, 0x0A },
    { 0x06, 0x99, 0x03 },
    { 0x38, 0x99, 0x38 },
    { 0xA8, 0x99, 0x18 },
    { 0x76, 0xA6, 0x20 },
    { 0xAD, 0xA6, 0x1C },
    { 0xEC, 0xA6, 0x1E },
    { 0x86, 0xAC, 0x15 },
    { 0x78, 0xAF, 0x3E },
    { 0x7B, 0xB3, 0x09 },
    { 0x27, 0xB8, 0x39 },
    { 0x88, 0xC2, 0x23 },
    { 0x44, 0xC3, 0x3A },
    { 0xCF, 0xC5, 0x34 },
    { 0x35, 0xC9, 0x30 },
    { 0x6E, 0xD1, 0x3B },
    { 0xD6, 0xD7, 0x16 },
    { 0x3A, 0xD9, 0x2B },
    { 0xAB, 0xE0, 0x11 },
    { 0xE0, 0xE2, 0x1B },
    { 0x6F, 0xE6, 0x0B },
    { 0xB8, 0xE8, 0x14 },
    { 0xD9, 0xE8, 0x1A },
    { 0xF9, 0xE8, 0x22 },
    { 0x04, 0xF1, 0x2E },
    { 0x49, 0xF8, 0x26 },
    { 0x10, 0xF9, 0x01 },
    { 0x39, 0xFB, 0x33 },
    { 0x28, 0xFC, 0x27 }
};

const Star StarFieldB[2*63] =
{
    { 0xFA, 0x06, 0x19 },
    { 0xE4, 0x07, 0x2D },
    { 0x72, 0x0A, 0x03 },
    { 0x84, 0x1B, 0x00 },
    { 0xBA, 0x1D, 0x29 },
    { 0xE3, 0x22, 0x04 },
    { 0xD1, 0x26, 0x2A },
    { 0x89, 0x32, 0x30 },
    { 0x5B, 0x36, 0x27 },
    { 0x84, 0x3A, 0x36 },
    { 0x53, 0x3F, 0x0D },
    { 0x08, 0x40, 0x1D },
    { 0x55, 0x40, 0x1A },
    { 0xAA, 0x41, 0x31 },
    { 0xFB, 0x41, 0x2B },
    { 0xBC, 0x46, 0x16 },
    { 0x93, 0x52, 0x39 },
    { 0xB9, 0x57, 0x10 },
    { 0x54, 0x59, 0x28 },
    { 0xE6, 0x5A, 0x01 },
    { 0xA7, 0x5D, 0x1B },
    { 0x2D, 0x5E, 0x35 },
    { 0x14, 0x62, 0x21 },
    { 0x69, 0x6D, 0x1F },
    { 0xCE, 0x6F, 0x0B },
    { 0xDF, 0x75, 0x2F },
    { 0xCB, 0x77, 0x12 },
    { 0x4E, 0x7C, 0x23 },
    { 0x4A, 0x84, 0x0F },
    { 0x12, 0x86, 0x25 },
    { 0x68, 0x8C, 0x32 },
    { 0x03, 0x95, 0x20 },
    { 0x0A, 0x9C, 0x17 },
    { 0x5B, 0xA3, 0x08 },
    { 0x5F, 0xA4, 0x3E },
    { 0x72, 0xA4, 0x2E },
    { 0xCC, 0xA6, 0x06 },
    { 0x8A, 0xAB, 0x0C },
    { 0xE0, 0xAD, 0x26 },
    { 0xF3, 0xAF, 0x0A },
    { 0x75, 0xB4, 0x13 },
    { 0x68, 0xB7, 0x11 },
    { 0x6D, 0xC2, 0x2C },
    { 0x76, 0xC3, 0x14 },
    { 0xCF, 0xC4, 0x1E },
    { 0x04, 0xC5, 0x1C },
    { 0x13, 0xC6, 0x3F },
    { 0xB9, 0xC7, 0x3C },
    { 0x05, 0xD7, 0x34 },
    { 0x95, 0xD7, 0x3A },
    { 0xFC, 0xD8, 0x02 },
    { 0xE7, 0xDC, 0x09 },
    { 0x1D, 0xE1, 0x05 },
    { 0x05, 0xE6, 0x33 },
    { 0x1C, 0xE9, 0x3B },
    { 0xA2, 0xED, 0x37 },
    { 0x28, 0xEE, 0x07 },
    { 0xDD, 0xEF, 0x18 },
    { 0x6D, 0xF0, 0x38 },
    { 0xA1, 0xF2, 0x0E },
    { 0x74, 0xF7, 0x3D },
    { 0x69, 0xF9, 0x22 },
    { 0x3F, 0xFF, 0x24 },
    
    { 0x71, 0x10, 0x34 },
    { 0xAF, 0x11, 0x23 },
    { 0xA0, 0x14, 0x26 },
    { 0x02, 0x17, 0x02 },
    { 0x4B, 0x19, 0x31 },
    { 0x93, 0x1C, 0x0E },
    { 0x1B, 0x1E, 0x25 },
    { 0x32, 0x20, 0x2E },
    { 0xEE, 0x20, 0x3A },
    { 0x79, 0x22, 0x2F },
    { 0x6C, 0x23, 0x17 },
    { 0xBC, 0x25, 0x11 },
    { 0x41, 0x29, 0x30 },
    { 0x1C, 0x2E, 0x32 },
    { 0xB9, 0x31, 0x01 },
    { 0x83, 0x32, 0x05 },
    { 0x95, 0x3A, 0x12 },
    { 0x0D, 0x3F, 0x07 },
    { 0x20, 0x41, 0x33 },
    { 0x92, 0x45, 0x2C },
    { 0xD4, 0x47, 0x08 },
    { 0xA1, 0x4B, 0x2D },
    { 0xD2, 0x4B, 0x3B },
    { 0xD6, 0x52, 0x24 },
    { 0x9A, 0x5F, 0x1C },
    { 0x16, 0x60, 0x3D },
    { 0x1A, 0x63, 0x1F },
    { 0xCD, 0x66, 0x28 },
    { 0xFF, 0x67, 0x10 },
    { 0x35, 0x69, 0x20 },
    { 0x8F, 0x6C, 0x04 },
    { 0xCA, 0x6C, 0x2A },
    { 0x5A, 0x74, 0x09 },
    { 0x60, 0x78, 0x38 },
    { 0x72, 0x79, 0x1E },
    { 0x37, 0x7F, 0x29 },
    { 0x12, 0x80, 0x14 },
    { 0x29, 0x82, 0x2B },
    { 0x84, 0x98, 0x36 },
    { 0x32, 0x99, 0x37 },
    { 0xBB, 0xA0, 0x19 },
    { 0x3E, 0xA3, 0x3E },
    { 0x4A, 0xA6, 0x1A },
    { 0x29, 0xA7, 0x21 },
    { 0x9D, 0xB7, 0x22 },
    { 0x6C, 0xB9, 0x15 },
    { 0x0C, 0xC0, 0x0A },
    { 0xC2, 0xC3, 0x0F },
    { 0x2F, 0xC9, 0x0D },
    { 0xD2, 0xCE, 0x16 },
    { 0xF3, 0xCE, 0x0B },
    { 0x75, 0xCF, 0x27 },
    { 0x1A, 0xD5, 0x35 },
    { 0x26, 0xD6, 0x39 },
    { 0x80, 0xDA, 0x3C },
    { 0xA9, 0xDD, 0x00 },
    { 0xBC, 0xEB, 0x03 },
    { 0x32, 0xEF, 0x1B },
    { 0x67, 0xF0, 0x3F },
    { 0xEF, 0xF1, 0x18 },
    { 0xA8, 0xF3, 0x0C },
    { 0xDE, 0xF9, 0x1D },
    { 0x2C, 0xFA, 0x13 }
};

Namco05xx::Namco05xx()
{
    reset();
}

void Namco05xx::reset()
{
    state_ = 0;
    scroll_x_ = 0;
    scroll_y_ = 0;
}

void Namco05xx::writeRegister( unsigned index, unsigned char value )
{
    state_ &= ~(1 << index);
    state_ |= (value & 1) << index;
}

void Namco05xx::update()
{
    static const int SpeedDelta[8] = { -3, -2, -1, 0, 3, 2, 1, 0 };
    
    scroll_x_ = (scroll_x_ + 256 + SpeedDelta[ state_ & 0x07 ]) % 256;
}

static void render_set( TBitmapIndexed * screen, int scroll_x, int scroll_y, const Star * set )
{
    for( int i=0; i<63; i++ ) {
        int x = (set[i].x + scroll_x) % 256 + 16;
        int y = (144 + (set[i].y + scroll_y)) % 256;
        
        screen->bits()->setPixel( 256-y, x, 32+set[i].color );
    }
}

void Namco05xx::render( TBitmapIndexed * screen )
{
    if( state_ & 0x20 ) {
        render_set( screen, scroll_x_, scroll_y_, StarFieldA + 63 * ((state_ >> 3) & 1) );
        render_set( screen, scroll_x_, scroll_y_, StarFieldB + 63 * ((state_ >> 4) & 1) );
    }
}
